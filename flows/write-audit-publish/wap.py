from prefect import task, flow, pause_flow_run, context, settings
from prefect import get_run_logger
from enum import Enum
from prefect_dbt.cli.commands import DbtCoreOperation
from prefect.blocks.notifications import SlackWebhook
from snowflake.sqlalchemy import URL
from sqlalchemy import create_engine
import pandas as pd
from prefect.artifacts import create_markdown_artifact
from textwrap import dedent
from prefect_dbt.cli import DbtCliProfile
from prefect_snowflake import SnowflakeCredentials

@flow
def trigger_dbt_flow() -> str:

    dbt_cli_profile = DbtCliProfile.load("newdbt")

    dbt_init = DbtCoreOperation(
        commands=["dbt run"],
        project_dir="/dbt",
        target="dev",
        dbt_cli_profile=dbt_cli_profile,
    )
    result = dbt_init.run()
    return result


class Approve(Enum):
    YES = "Yes"
    NO = "No"

@task
def difference_report():
    logger = get_run_logger()
    snowflake_credentials = SnowflakeCredentials.load("sfcreds")
    url = URL(
        account=snowflake_credentials.account,
        user=snowflake_credentials.user,
        password=snowflake_credentials.password.get_secret_value(),
        database="DBTHOUSE",
        warehouse="DBT_WH",
        schema="DWH",
    )


    query = """
WITH prod AS (
    SELECT * FROM dbthouse.dwh.sysselsetting_forholdstall
),
stg AS (
    SELECT * FROM dbthouse.develop_dwh.sysselsetting_forholdstall
),
new_rows AS (
    SELECT * FROM stg
    minus
    SELECT * FROM prod
)
SELECT * FROM new_rows
    """
    try:
        engine = create_engine(url)
        with engine.connect() as conn:
            df = pd.read_sql(query, conn)

        logger.info(f"Read {len(df)} rows from Snowflake")

        pd_table = df.head(10).to_markdown(index=False)
        markdown_content = dedent(
f"""
# Difference Report

Total new rows: {len(df)}

First 10 new rows in `sysselsetting_forholdstall`:

{pd_table}

This report is generated by the `difference_report` task.
"""
        )
    except Exception as e:
        
        logger.info(f"Error generating difference report: {e}")
        markdown_content = dedent(f"""
        # Unable to generate difference report
        """)

    markdown_id = create_markdown_artifact(markdown_content, "data-qa-report", "Pre-publish difference report")

    return {"id": str(markdown_id), "content": markdown_content}


@task
def publish():
    snowflake_credentials = SnowflakeCredentials.load("sfcreds")
    url = URL(
        account=snowflake_credentials.account,
        user=snowflake_credentials.user,
        password=snowflake_credentials.password.get_secret_value(),
        database="DBTHOUSE",
        warehouse="DBT_WH",
        schema="DWH",
    )

    engine = create_engine(url)

    query = """
    ALTER SCHEMA dbthouse.develop_dwh SWAP WITH dbthouse.dwh
    """

    with engine.connect() as conn:
        conn.execute(query)


@flow(name="Write Audit Publish")
async def write_audit_publish():

    dbt_job = trigger_dbt_flow()
    report = difference_report()
    artifact_url = f"{settings.PREFECT_UI_URL.value()}/artifacts/artifact/{report['id']}"
    flow_run = context.get_run_context().flow_run
    flow_run_url = (
                f"{settings.PREFECT_UI_URL.value()}/flow-runs/flow-run/{flow_run.id}"
            )

    slack_webhook_block = await SlackWebhook.load("radbrt")
    _ = await slack_webhook_block.notify(
        dedent(
            f"""There is new data waiting to be published.
            Review the difference report: {artifact_url}.

            Approve or reject the publication at {flow_run_url}
            """)
    )
    decision = await pause_flow_run(wait_for_input=Approve)


    logger = get_run_logger()
    if decision == Approve.YES:
        logger.info(f"Publishing new data to the world!")
        publish()
    else:
        logger.info(f"Data publication rejected.")


if __name__ == '__main__':
    write_audit_publish()

